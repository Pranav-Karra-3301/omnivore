name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
          - os: ubuntu-latest  
            target: aarch64-unknown-linux-gnu
            archive: tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            archive: tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            archive: tar.gz

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup cross compilation
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build CLI
        run: |
          cargo build --release --target ${{ matrix.target }} --bin omnivore
          
      - name: Build API
        run: |
          cargo build --release --target ${{ matrix.target }} --bin omnivore-api

      - name: Create archive
        run: |
          mkdir -p release
          cp target/${{ matrix.target }}/release/omnivore release/
          cp target/${{ matrix.target }}/release/omnivore-api release/
          cp configs/crawler.toml release/
          cp README.md release/
          cp -r configs release/ || true
          
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a omnivore-${{ github.ref_name }}-${{ matrix.target }}.zip release/*
          else
            tar czf omnivore-${{ github.ref_name }}-${{ matrix.target }}.tar.gz -C release .
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: omnivore-${{ github.ref_name }}-${{ matrix.target }}
          path: omnivore-${{ github.ref_name }}-${{ matrix.target }}.*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
          generate_release_notes: true
          files: artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-homebrew:
    name: Update Homebrew Formula
    needs: release
    runs-on: ubuntu-latest
    if: '!contains(github.ref_name, ''alpha'') && !contains(github.ref_name, ''beta'') && !contains(github.ref_name, ''rc'')'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update Homebrew formula
        run: |
          # Download release assets to get SHA256 hashes
          VERSION=${GITHUB_REF_NAME#v}
          
          # Get SHA256 hashes for each platform
          for target in x86_64-apple-darwin aarch64-apple-darwin x86_64-unknown-linux-gnu aarch64-unknown-linux-gnu; do
            echo "Getting SHA256 for $target"
            wget -q "https://github.com/${GITHUB_REPOSITORY}/releases/download/v${VERSION}/omnivore-v${VERSION}-${target}.tar.gz"
            SHA=$(sha256sum "omnivore-v${VERSION}-${target}.tar.gz" | cut -d' ' -f1)
            echo "${target}_sha=${SHA}" >> $GITHUB_ENV
          done

      - name: Create PR to homebrew tap
        run: |
          echo "Manual step: Update Formula/omnivore.rb with new version and SHA256 hashes"
          echo "Then create a PR to your homebrew tap repository"