name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
      
      - name: Check if beta release
        id: check_beta
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          if [[ "$VERSION" == *"beta"* ]] || [[ "$VERSION" == *"alpha"* ]] || [[ "$VERSION" == *"rc"* ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Omnivore ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: ${{ steps.check_beta.outputs.prerelease }}
          body: |
            ## What's Changed
            
            ### Features
            - Universal web crawler with async/parallel processing
            - Knowledge graph builder with intelligent entity extraction
            - REST and GraphQL API endpoints
            - Configurable politeness and rate limiting
            
            ### Installation
            
            #### Homebrew
            ```bash
            brew tap Pranav-Karra-3301/omnivore
            brew install omnivore
            ```
            
            #### Docker
            ```bash
            docker run -p 3000:3000 ghcr.io/pranav-karra-3301/omnivore:${{ steps.get_version.outputs.version }}
            ```
            
            #### Binary Downloads
            Download the appropriate binary for your platform below.

  build-binaries:
    name: Build ${{ matrix.target }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: false
          # TODO: Fix cross-compilation - see issue #2
          # - target: aarch64-unknown-linux-gnu
          #   os: ubuntu-latest
          #   cross: true
          - target: x86_64-apple-darwin
            os: macos-latest
            cross: false
          # Note: aarch64-apple-darwin requires macOS runner with M1/M2
          # - target: aarch64-apple-darwin
          #   os: macos-latest
          #   cross: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install cross-compilation tools
        if: matrix.cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
      
      - name: Build binary
        run: |
          if [ "${{ matrix.cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
      
      - name: Create release archive
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"
          TARGET="${{ matrix.target }}"
          ARCHIVE_NAME="omnivore-${VERSION}-${TARGET}"
          
          mkdir -p "${ARCHIVE_NAME}"
          
          # Copy binaries
          cp target/${TARGET}/release/omnivore "${ARCHIVE_NAME}/"
          cp target/${TARGET}/release/omnivore-api "${ARCHIVE_NAME}/"
          
          # Copy configuration and documentation
          cp -r configs "${ARCHIVE_NAME}/"
          cp README.md "${ARCHIVE_NAME}/"
          cp -r docs "${ARCHIVE_NAME}/" || true
          
          # Create license file
          cat > "${ARCHIVE_NAME}/LICENSE" << 'EOF'
          Licensed under either of
          
           * Apache License, Version 2.0
             (http://www.apache.org/licenses/LICENSE-2.0)
           * MIT license
             (http://opensource.org/licenses/MIT)
          
          at your option.
          EOF
          
          # Create shell completions if script exists
          if [ -f scripts/build-completions.sh ]; then
            mkdir -p "${ARCHIVE_NAME}/completions"
            ./scripts/build-completions.sh "${ARCHIVE_NAME}/completions" || true
          fi
          
          # Create tar.gz
          tar -czf "${ARCHIVE_NAME}.tar.gz" "${ARCHIVE_NAME}"
          
          # Calculate SHA256 (cross-platform)
          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum "${ARCHIVE_NAME}.tar.gz" > "${ARCHIVE_NAME}.tar.gz.sha256"
          elif command -v shasum >/dev/null 2>&1; then
            shasum -a 256 "${ARCHIVE_NAME}.tar.gz" > "${ARCHIVE_NAME}.tar.gz.sha256"
          else
            echo "Error: No SHA256 tool found" >&2
            exit 1
          fi
          
          echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
          echo "ARCHIVE_FILE=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_ENV
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ARCHIVE_FILE }}
          asset_name: ${{ env.ARCHIVE_FILE }}
          asset_content_type: application/gzip
      
      - name: Upload SHA256
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ARCHIVE_FILE }}.sha256
          asset_name: ${{ env.ARCHIVE_FILE }}.sha256
          asset_content_type: text/plain

  # TODO: Fix Docker build - see issue #1
  # build-docker:
  #   name: Build and Push Docker Image
  #   needs: create-release
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #     
  #     - name: Log in to GitHub Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     
  #     - name: Extract metadata
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: ghcr.io/${{ github.repository }}
  #         tags: |
  #           type=ref,event=tag
  #           type=raw,value=latest
  #     
  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         platforms: linux/amd64,linux/arm64
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  update-homebrew:
    name: Update Homebrew Formula
    needs: [create-release, build-binaries]
    runs-on: ubuntu-latest
    if: github.repository == 'Pranav-Karra-3301/omnivore'
    steps:
      - name: Checkout homebrew-omnivore repository
        uses: actions/checkout@v4
        with:
          repository: Pranav-Karra-3301/homebrew-omnivore
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          path: homebrew-omnivore
      
      - name: Download release assets for SHA calculation
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"
          cd homebrew-omnivore
          
          # Download all SHA256 files
          for target in x86_64-apple-darwin aarch64-apple-darwin x86_64-unknown-linux-gnu aarch64-unknown-linux-gnu; do
            curl -sL "https://github.com/Pranav-Karra-3301/omnivore/releases/download/${VERSION}/omnivore-${VERSION}-${target}.tar.gz.sha256" \
              -o "${target}.sha256"
          done
          
          # Extract SHA256 values
          ARM64_MAC_SHA=$(cut -d' ' -f1 aarch64-apple-darwin.sha256)
          X86_64_MAC_SHA=$(cut -d' ' -f1 x86_64-apple-darwin.sha256)
          ARM64_LINUX_SHA=$(cut -d' ' -f1 aarch64-unknown-linux-gnu.sha256)
          X86_64_LINUX_SHA=$(cut -d' ' -f1 x86_64-unknown-linux-gnu.sha256)
          
          echo "ARM64_MAC_SHA=${ARM64_MAC_SHA}" >> $GITHUB_ENV
          echo "X86_64_MAC_SHA=${X86_64_MAC_SHA}" >> $GITHUB_ENV
          echo "ARM64_LINUX_SHA=${ARM64_LINUX_SHA}" >> $GITHUB_ENV
          echo "X86_64_LINUX_SHA=${X86_64_LINUX_SHA}" >> $GITHUB_ENV
          echo "VERSION=${VERSION#v}" >> $GITHUB_ENV
      
      - name: Update Homebrew formula
        run: |
          cd homebrew-omnivore
          
          # Update omnivore.rb
          sed -i "s/version \".*\"/version \"${{ env.VERSION }}\"/" omnivore.rb
          sed -i "s/REPLACE_WITH_ARM64_MAC_SHA256/${{ env.ARM64_MAC_SHA }}/" omnivore.rb
          sed -i "s/REPLACE_WITH_X86_64_MAC_SHA256/${{ env.X86_64_MAC_SHA }}/" omnivore.rb
          sed -i "s/REPLACE_WITH_ARM64_LINUX_SHA256/${{ env.ARM64_LINUX_SHA }}/" omnivore.rb
          sed -i "s/REPLACE_WITH_X86_64_LINUX_SHA256/${{ env.X86_64_LINUX_SHA }}/" omnivore.rb
          
          # Commit changes
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add omnivore.rb
          git commit -m "Update omnivore to ${{ needs.create-release.outputs.version }}"
          git push